Simple python script which iterates through prepared json dictionaries made from capabilities.xml files
and populates yang catalog with:

module: yang-catalog
    +--rw catalog
       +--rw modules
       |  +--rw module* [name revision]
       |     +--rw name                  yang:yang-identifier
       |     +--rw revision              union
       |     +--rw schema?               inet:uri
       |     +--rw namespace             inet:uri
       |     +--rw feature*              yang:yang-identifier
       |     +--rw deviation* [name revision]
       |     |  +--rw name        yang:yang-identifier
       |     |  +--rw revision    union
       |     +--rw conformance-type      enumeration
       |     +--rw submodule* [name revision]
       |     |  +--rw name        yang:yang-identifier
       |     |  +--rw revision    union
       |     |  +--rw schema?     inet:uri
       |     +--rw document-name?        string
       |     +--rw author-email?         string
       |     +--rw compilation-status?   enumeration
       |     +--rw compilation-result?   string
       |     +--rw reference?            string
       |     +--rw prefix?               string
       |     +--rw yang-version?         string
       |     +--rw organization?         string
       |     +--rw description?          string
       |     +--rw contact?              string
       |     +--rw maturity-level?       enumeration
       |     +--rw implementations
       |        +--rw implementation* [vendor platform software-version software-flavor]
       |           +--rw vendor              string
       |           +--rw platform            string
       |           +--rw software-version    string
       |           +--rw software-flavor     string
       |           +--rw os-version?         string
       |           +--rw feature-set?        string
       |           +--rw os-type?            string
       +--rw vendors
          +--rw vendor* [name]
             +--rw name         string
             +--rw platforms
                +--rw platform* [name]
                   +--rw name                 string
                   +--rw software-versions
                      +--rw software-version* [name]
                         +--rw name                string
                         +--rw software-flavors
                            +--rw software-flavor* [name]
                               +--rw name         string
                               +--rw protocols
                               |  +--rw protocol* [name]
                               |     +--rw name                enumeration
                               |     +--rw protocol-version?   string
                               |     +--rw capabilities*       string
                               +--rw modules
                                  +--rw module* [name revision]
                                     +--rw name        -> ../../../../../../../../../../../modules/module/name
                                     +--rw revision    -> ../../../../../../../../../../../modules/module/revision



Steps of how it is done:
    1, Runs the hello message parsing python script
    2, Loads all json file to the list of data
    3, Finds prepare.json file a creats patch request which will populate the first branch - catalog-modules-moduel -
       of the yang-catalog.yang
    4, Iterates through the list of normal{id}.json files and sends a PATCH request for each file with body containing
       all the necessary data for each hello message to populate second branch - catalog/vendors/vendor - of the
       yang-catalog.yang
    9, Removes all the json files created when parsing hello message.

How to run populating
    1, ConfD must be running and confd-module-catalog must be started using: make all start. In case it already was
     started and some changes were made use following command to restart: make clean stop all start.
    2, Help to run populate script using python command follows
    usage: populate.py [-h] [--port PORT] [--ip IP]
                   [--credentials CREDENTIALS CREDENTIALS]

    Parse hello messages and yang files to json dictionary. These dictionaries are
    used for populating a yangcatalog. This script runs first a runCapabilities.py
    script to create a Json files which are used to populate database.

    optional arguments:
          -h, --help            show this help message and exit
          --port PORT           Set port where the confd is started. Default -> 8008
          --ip IP               Set ip address where the confd is started. Default ->
                                127.0.0.1
          --credentials CREDENTIALS CREDENTIALS
                                Set authorization parameters username password
                                respectively. Default parameters are admin admin
